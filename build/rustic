#!/usr/bin/env python3

import os
import re
import readline
import subprocess
import sys

exe_name = '.rustic.scratch'
file_name = exe_name + '.rs'
valid_head = default_head = 'use std;\n'
valid_body = default_body = 'fn main() {\n'
default_transient = '// Transient:\n'

print('[Compiler info]\n' + subprocess.check_output(('rustc', '-v')).decode('u8') + \
'''
[Tips]
Blank line to eval, ^D to clear environment, ?expr to log expr, ^C to quit
For documentation and examples, see https://github.com/Wensleydale/rust-rustic\n''')

try:
    while True:
        print('[Input]')
        new_head = new_body = ''
        transient = default_transient
        persist_transient = False

        while True:  # Breaks on blank lines and EOF
            try:
                line = input()
            except EOFError:
                valid_head = default_head
                valid_body = default_body
                print('\nEnvironment reset\n')
                break

            if re.match('\?', line):  # Inspect
                if line == '?':
                    persist_transient = True
                else:
                    transient += 'log(error, ' + line[1:] + ');\n'
            elif line != '':  # Command
                if persist_transient:
                    transient += line + '\n'
                elif re.match('use ', line) or re.match('import ', line):
                    new_head += line + '\n'
                elif line != '':
                    new_body += line + '\n'
            else:  # Newline
                break

        with open(file_name, 'w') as f:
            f.write(valid_head + new_head + valid_body + new_body + transient + '}')

        try:  # To compile the file
            subprocess.check_output(('rustc', file_name)).decode('u8')
            try:  # To run the file
                output = subprocess.check_output(('./' + exe_name)).decode('u8')
                if output != '': print('[Output]\n' + output)
                valid_head += new_head
                valid_body += new_body
            except subprocess.CalledProcessError as e:
                output = '[Runtime error]\n' + e.output.decode('u8')
                print(output)
        except subprocess.CalledProcessError as e:
            output = '[Compiler error]\n' + e.output.decode('u8')
            print(output)

except KeyboardInterrupt:
    prompt = input('\n[Exit]\nDelete scratch files? [y]/n: ')
    if prompt.lower() != 'n':
        if os.path.exists(file_name): os.remove(file_name)
        if os.path.exists(exe_name): os.remove(exe_name)
    sys.exit(0)
